// Generated by CoffeeScript 1.10.0
(function() {
  var __, basename, dialog, dirname, exec, mkdir, ncp, readFile, readFileSync, readdir, ref, ref1, setWatch, stat, unlink, watch, webInterface, window, writeFile;

  webInterface = (require('./interface'))();

  ref = require('fs'), writeFile = ref.writeFile, mkdir = ref.mkdir, readFile = ref.readFile, readFileSync = ref.readFileSync, stat = ref.stat, readdir = ref.readdir, unlink = ref.unlink, watch = ref.watch;

  dialog = require('electron').dialog;

  ref1 = require('path'), dirname = ref1.dirname, basename = ref1.basename;

  ncp = require('ncp');

  window = null;

  __ = require('mini-utils');

  exec = require('child_process').exec;

  setWatch = function(dir) {
    return watch(dir, {
      persistent: false,
      recursive: true
    }, function(e) {
      webInterface.reloadProject();
      return webInterface.reloadProject();
    });
  };

  module.exports = function(newWindow) {
    var ret;
    if (newWindow != null) {
      window = newWindow;
    }
    ret = {
      newProject: function(cb) {
        var langs, types;
        langs = ['JavaScript', 'CoffeeScript'];
        types = [
          {
            option: 'Tabbed',
            info: 'Application with tabs, like this IDE'
          }, {
            option: 'Basic',
            info: 'Simple application, with a single view'
          }
        ];
        return webInterface.createDialog({
          type: 1,
          choices: langs,
          text: 'Project Language:'
        }, function(lang) {
          if (lang == null) {
            return cb(new Error('User canceled the dialog'), null);
          }
          return webInterface.createDialog({
            type: 1,
            choices: types,
            text: 'Application Type:'
          }, function(type) {
            if (type == null) {
              return cb(new Error('User canceled the dialog'), null);
            }
            return webInterface.createDialog({
              type: 2,
              text: 'Project Name'
            }, function(name) {
              var d, proj;
              d = new Date;
              proj = {
                dates: {
                  created: (d.getMonth()) + "-" + (d.getDate()) + "-" + (d.getFullYear()),
                  lastModified: (d.getMonth()) + "-" + (d.getDate()) + "-" + (d.getFullYear())
                },
                projectLanguage: lang,
                projectLanguageString: langs[lang],
                projectType: type,
                projectTypeString: types[type].option,
                projectName: name
              };
              return dialog.showOpenDialog(window, {
                title: 'Save project to:',
                defaultPath: __.homeDir(),
                properties: ['openDirectory', 'createDirectory']
              }, function(dirs) {
                var dir;
                if ((dirs == null) || (dirs[0] == null)) {
                  return cb(new Error('User canceled the dialog'), null);
                }
                dir = dirs[0];
                proj.path = dir + "/" + name;
                return mkdir(dir + "/" + name, function(err) {
                  if (err != null) {
                    return cb(err, null);
                  }
                  return ncp(__dirname + "/../projectTemplates/" + (types[type].option.toLowerCase()) + "/" + (langs[lang].toLowerCase()), dir + "/" + name, function(err) {
                    if (err != null) {
                      return cb(err, null);
                    }
                    return writeFile(dir + "/" + name + "/" + name + ".oxyproj", JSON.stringify(proj, null, '  '), function(err) {
                      if (err != null) {
                        return cb(err, null);
                      }
                      return writeFile(dir + "/" + name + "/package.json", JSON.stringify({
                        name: name,
                        version: '1.0.0',
                        description: name.substr(0, 1).toUpperCase() + name.slice(1),
                        main: 'index.js',
                        dependencies: {
                          'hydrogen-helpers': '^1.0.0'
                        }
                      }, null, '  '), function(err) {
                        if (err != null) {
                          return cb(err, null);
                        }
                        return writeFile(dir + "/" + name + "/app.json", JSON.stringify({
                          appTitle: name.toLowerCase(),
                          titleBarName: name.substr(0, 1).toUpperCase() + name.slice(1)
                        }, null, '  '), function(err) {
                          if (err != null) {
                            return cb(err, null);
                          }
                          return mkdir(dir + "/" + name + "/node_modules", function(err) {
                            if (err != null) {
                              return cb(err, null);
                            }
                            return mkdir(dir + "/" + name + "/node_modules/hydrogen-helpers", function(err) {
                              if (err != null) {
                                return cb(err, null);
                              }
                              return ncp(__dirname + "/../hydrogen-helpers", dir + "/" + name + "/node_modules/hydrogen-helpers", function(err) {
                                if (err != null) {
                                  return cb(err, null);
                                }
                                webInterface.createToast('Installing electron...');
                                return exec('npm install --save electron-prebuilt', {
                                  cwd: dir + "/" + name
                                }, function(err, stdout, stderr) {
                                  if (err != null) {
                                    return cb(err, null);
                                  }
                                  cb(null, proj);
                                  return setWatch(dir + "/" + name);
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      },
      openProject: function(cb) {
        return dialog.showOpenDialog(window, {
          title: 'Open a project:',
          defaultPath: __.homeDir(),
          filters: [
            {
              name: 'Project Files',
              extensions: ['oxyproj']
            }
          ],
          properties: ['openFile', 'createDirectory']
        }, function(files) {
          var file;
          if ((files == null) || (files[0] == null)) {
            return cb(new Error('User canceled the dialog'), null);
          }
          file = files[0];
          return readFile(file, function(err, cont) {
            var path, proj;
            if (err != null) {
              return cb(err, null);
            }
            proj = JSON.parse(String(cont));
            path = dirname(file);
            if (proj.path !== path) {
              proj.path = dirname(file);
              return writeFile(file, JSON.stringify(proj, null, '  '), function(err) {
                if (err != null) {
                  return cb(err, null);
                }
                cb(null, proj);
                return setWatch(path);
              });
            } else {
              cb(null, proj);
              return setWatch(path);
            }
          });
        });
      },
      saveFile: function(fn, cont, cb) {
        return writeFile(fn, cont, cb);
      },
      rmRf: function(list, cb) {
        var tmp;
        tmp = function(i) {
          if (i >= list.length) {
            return cb(null);
          }
          return stat(list[i], function(err, stats) {
            if (err != null) {
              return cb(err);
            }
            if (stats.isDirectory()) {
              return readdir(list[i], function(err, files) {
                var arr, file, j, len;
                if (err != null) {
                  return cb(err);
                }
                arr = [];
                for (j = 0, len = files.length; j < len; j++) {
                  file = files[j];
                  arr.push(list[i] + "/" + file);
                }
                return ret.rmRf(arr, function(err) {
                  if (err != null) {
                    return cb(err);
                  }
                  return tmp(i + 1);
                });
              });
            } else {
              return unlink(list[i], function(err) {
                if (err != null) {
                  return cb(err);
                }
                return tmp(i + 1);
              });
            }
          });
        };
        return tmp(0);
      },
      recurseList: function(dir, cb) {
        return readdir(dir, function(err, files) {
          var ret2, tmp;
          if (err != null) {
            return cb(err);
          }
          ret2 = [];
          tmp = function(i) {
            if (i >= files.length) {
              return cb(null, ret2);
            }
            return stat(dir + "/" + files[i], function(err, stats) {
              if (err != null) {
                return cb(err);
              }
              if (stats.isDirectory()) {
                return ret.recurseList(dir + "/" + files[i], function(err, files2) {
                  if (err != null) {
                    return cb(err);
                  }
                  ret2 = ret2.concat(files2);
                  return tmp(i + 1);
                });
              } else {
                ret2.push(dir + "/" + files[i]);
                return tmp(i + 1);
              }
            });
          };
          return tmp(0);
        });
      },
      cleanDS_Stores: function(dir, cb) {
        return ret.recurseList(dir, function(err, list) {
          var arr, item, j, len;
          if (err != null) {
            return cb(err);
          }
          arr = [];
          for (j = 0, len = list.length; j < len; j++) {
            item = list[j];
            if ((basename(item)) === '.DS_Store') {
              arr.push(item);
            }
          }
          return ret.rmRf(arr, function(err) {
            if (err != null) {
              return cb(err);
            }
            return cb(null);
          });
        });
      }
    };
    return ret;
  };

}).call(this);

//# sourceMappingURL=fileManager.js.map
